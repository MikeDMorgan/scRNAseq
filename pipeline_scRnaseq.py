##############################################################################
#
#   MRC FGU CGAT
#
#   $Id$
#
#   Copyright (C) 2016 Mike Morgan
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
###############################################################################
"""===========================
single cell RNA seq analysis pipeline
===========================

:Author: Mike Morgan
:Release: $Id$
:Date: |today|
:Tags: Python


Overview
========

.. This pipeline carries out several aspects of single cell RNAseq analysis.
This includes clustering using unsupervised approaches, such as PCA and tSNE,
estimates technical noise using two approaches (users choice), and performs
differential expression testing between multiple conditions.

Usage
=====

See :ref:`PipelineSettingUp` and :ref:`PipelineRunning` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.ini` file.
CGATReport report requires a :file:`conf.py` and optionally a
:file:`cgatreport.ini` file (see :ref:`PipelineReporting`).

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_scRnaseq.py config

Input files
-----------

counts_table - assumes format of cells as columns and genes as rows

spikein_genes - list of spike in gene names, 1 per row

deisgn - table of experimental design conditions, with cells as rows and columns
         describing the experimental setup.  Requires a column `condition` that is
         used for differential expression testing.

Requirements
------------

The pipeline requires the results from
:doc:`pipeline_annotations`. Set the configuration variable
:py:data:`annotations_database` and :py:data:`annotations_dir`.

On top of the default CGAT setup, the pipeline requires the following
software to be in the path:

.. Add any additional external requirements such as 3rd party software
   or R modules below:

Requirements:

* samtools >= 1.1
* BASiCs
* coda

Pipeline output
===============

.. Describe output files of the pipeline here

Glossary
========

.. glossary::


Code
====

"""
from ruffus import *

import sys
import os
import sqlite3
import CGAT.Experiment as E
import CGATPipelines.Pipeline as P

# load options from the config file
PARAMS = P.getParameters(
    ["%s/pipeline.ini" % os.path.splitext(__file__)[0],
     "../pipeline.ini",
     "pipeline.ini"])

# add configuration values from associated pipelines
#
# 1. pipeline_annotations: any parameters will be added with the
#    prefix "annotations_". The interface will be updated with
#    "annotations_dir" to point to the absolute path names.
PARAMS.update(P.peekParameters(
    PARAMS["annotations_dir"],
    "pipeline_annotations.py",
    on_error_raise=__name__ == "__main__",
    prefix="annotations_",
    update_interface=True))


# if necessary, update the PARAMS dictionary in any modules file.
# e.g.:
#
# import CGATPipelines.PipelineGeneset as PipelineGeneset
# PipelineGeneset.PARAMS = PARAMS
#
# Note that this is a hack and deprecated, better pass all
# parameters that are needed by a function explicitely.

# -----------------------------------------------
# Utility functions
def connect():
    '''utility function to connect to database.

    Use this method to connect to the pipeline database.
    Additional databases can be attached here as well.

    Returns an sqlite3 database handle.
    '''

    dbh = sqlite3.connect(PARAMS["database"])
    statement = '''ATTACH DATABASE '%s' as annotations''' % (
        PARAMS["annotations_database"])
    cc = dbh.cursor()
    cc.execute(statement)
    cc.close()

    return dbh

# --------------------------------------------------- #


@follows(mkdir("enrichment.dir"))
@transform("WGCNA.dir/*.tsv",
           regex("WGCNA.dir/(.+)_(.+)_(.+).tsv"),
           add_inputs("%s" % PARAMS['category_file']),
           r"enrichment.dir/\1-\2-\3_goslim.tsv")
def testCategoryEnrichment(infiles, outfile):
    '''
    Test gene set for enrichment of categories
    '''

    gene_file = infiles[0]
    category_file = infiles[1]

    job_memory = "12G"
    statement = '''
    python /ifs/devel/projects/proj056/pipeline_scRnaseq/sc2enrich.py
    --sample-size=0.5
    --gene-list=%(gene_file)s
    --gene-categories=%(category_file)s
    --permutations=%(enrichment_perms)i
    --min-category-size=5
    --log=%(outfile)s.log
    %(expression_file)s
    > %(outfile)s
    '''

    P.run()

# ---------------------------------------------------
# Generic pipeline tasks
@follows()
def full():
    pass


@follows(mkdir("report"))
def build_report():
    '''build report from scratch.

    Any existing report will be overwritten.
    '''

    E.info("starting report build process from scratch")
    P.run_report(clean=True)


@follows(mkdir("report"))
def update_report():
    '''update report.

    This will update a report with any changes inside the report
    document or code. Note that updates to the data will not cause
    relevant sections to be updated. Use the cgatreport-clean utility
    first.
    '''

    E.info("updating report")
    P.run_report(clean=False)


@follows(update_report)
def publish_report():
    '''publish report in the CGAT downloads directory.'''

    E.info("publishing report")
    P.publish_report()

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
